/*
Deployment script for Savnac.Database

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Savnac.Database"
:setvar DefaultFilePrefix "Savnac.Database"
:setvar DefaultDataPath "c:\Program Files (x86)\Microsoft SQL Server\MSSQL11.DRUKSQL\MSSQL\DATA\"
:setvar DefaultLogPath "c:\Program Files (x86)\Microsoft SQL Server\MSSQL11.DRUKSQL\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Rename refactoring operation with key 86567561-d645-4899-9a25-5fe2a7661541 is skipped, element [dbo].[Table1] (SqlTable) will not be renamed to [messageTable]';


GO
PRINT N'Rename refactoring operation with key e7737c8b-7375-4d17-8a82-de58cd0616a5 is skipped, element [dbo].[announcementTable].[Id] (SqlSimpleColumn) will not be renamed to announcementId';


GO
PRINT N'Rename refactoring operation with key f7fc88de-c218-40a9-9889-7623daf0b913 is skipped, element [dbo].[courseTable].[Id] (SqlSimpleColumn) will not be renamed to courseId';


GO
PRINT N'Rename refactoring operation with key ee350836-33a3-4522-9931-6eff0e7ab72d is skipped, element [dbo].[courseTable].[teacherId] (SqlSimpleColumn) will not be renamed to teacherName';


GO
PRINT N'Rename refactoring operation with key e5b91a6f-a2c0-4371-b320-8ab6f4ce8209 is skipped, element [dbo].[Course].[studentList] (SqlSimpleColumn) will not be renamed to studentIDList';


GO
PRINT N'Rename refactoring operation with key 0fdff2b3-5771-476e-8c4d-b3a0ad8a904f is skipped, element [dbo].[Student].[Id] (SqlSimpleColumn) will not be renamed to StudentId';


GO
PRINT N'Rename refactoring operation with key aaa7b2a3-0529-4f67-a862-b5eb082acdc6, 7f9f14fa-5eac-4320-a072-f71fd9edeab7 is skipped, element [dbo].[JoinTable].[Id] (SqlSimpleColumn) will not be renamed to EnrollmentID';


GO
PRINT N'Creating [dbo].[Announcement]...';


GO
CREATE TABLE [dbo].[Announcement] (
    [announcementId] INT           IDENTITY (1, 1) NOT NULL,
    [username]       VARCHAR (50)  NULL,
    [title]          VARCHAR (50)  NULL,
    [body]           VARCHAR (MAX) NULL,
    [timePosted]     DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([announcementId] ASC)
);


GO
PRINT N'Creating [dbo].[Assignment]...';


GO
CREATE TABLE [dbo].[Assignment] (
    [assignmentId] INT         IDENTITY (1, 1) NOT NULL,
    [courseId]     INT         NOT NULL,
    [name]         NCHAR (128) NOT NULL,
    [description]  NTEXT       NOT NULL,
    [dueDate]      DATETIME    NULL,
    PRIMARY KEY CLUSTERED ([assignmentId] ASC)
);


GO
PRINT N'Creating [dbo].[AssignmentScore]...';


GO
CREATE TABLE [dbo].[AssignmentScore] (
    [assignmentScoresId] INT             IDENTITY (1, 1) NOT NULL,
    [assignmentId]       INT             NOT NULL,
    [studentId]          INT             NOT NULL,
    [score]              INT             NOT NULL,
    [submission]         VARBINARY (MAX) NULL,
    PRIMARY KEY CLUSTERED ([assignmentScoresId] ASC)
);


GO
PRINT N'Creating [dbo].[Atendee]...';


GO
CREATE TABLE [dbo].[Atendee] (
    [AtendeeId] INT           NOT NULL,
    [Name]      VARCHAR (100) NOT NULL,
    [courseId]  INT           NOT NULL,
    [isTeacher] BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([AtendeeId] ASC)
);


GO
PRINT N'Creating [dbo].[Attendance]...';


GO
CREATE TABLE [dbo].[Attendance] (
    [studentName] NVARCHAR (100) NOT NULL,
    [isPresent]   BIT            NOT NULL,
    [currentDate] DATE           NOT NULL,
    PRIMARY KEY CLUSTERED ([studentName] ASC, [currentDate] ASC)
);


GO
PRINT N'Creating [dbo].[Course]...';


GO
CREATE TABLE [dbo].[Course] (
    [courseId]       INT          NOT NULL,
    [courseName]     VARCHAR (50) NOT NULL,
    [syllabusName]   VARCHAR (50) NULL,
    [announcementId] INT          NULL,
    PRIMARY KEY CLUSTERED ([courseId] ASC)
);


GO
PRINT N'Creating [dbo].[ForumTable]...';


GO
CREATE TABLE [dbo].[ForumTable] (
    [postId]      INT           NOT NULL,
    [postTitle]   VARCHAR (50)  NOT NULL,
    [postContent] VARCHAR (MAX) NOT NULL,
    [postTime]    DATETIME      NOT NULL,
    [courseId]    INT           NOT NULL,
    [userName]    VARCHAR (50)  NOT NULL,
    [post_isRead] BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([postId] ASC)
);


GO
PRINT N'Creating [dbo].[JoinTable]...';


GO
CREATE TABLE [dbo].[JoinTable] (
    [StudentID] INT NOT NULL,
    [CourseID]  INT NOT NULL,
    PRIMARY KEY CLUSTERED ([StudentID] ASC)
);


GO
PRINT N'Creating [dbo].[Message]...';


GO
CREATE TABLE [dbo].[Message] (
    [msg_id]       INT           IDENTITY (1, 1) NOT NULL,
    [msg_sEmail]   VARCHAR (30)  NOT NULL,
    [msg_rEmail]   VARCHAR (30)  NOT NULL,
    [msg_subject]  VARCHAR (30)  NOT NULL,
    [msg_content]  VARCHAR (MAX) NOT NULL,
    [msg_dateTime] DATETIME      NOT NULL,
    [msg_isRead]   BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([msg_id] ASC)
);


GO
PRINT N'Creating Default Constraint on [dbo].[Assignment]....';


GO
ALTER TABLE [dbo].[Assignment]
    ADD DEFAULT ('No Description Set') FOR [description];


GO
PRINT N'Creating Default Constraint on [dbo].[AssignmentScore]....';


GO
ALTER TABLE [dbo].[AssignmentScore]
    ADD DEFAULT ((0)) FOR [score];


GO
PRINT N'Creating Foreign Key on [dbo].[Assignment]....';


GO
ALTER TABLE [dbo].[Assignment] WITH NOCHECK
    ADD FOREIGN KEY ([courseId]) REFERENCES [dbo].[Course] ([courseId]);


GO
PRINT N'Creating Foreign Key on [dbo].[AssignmentScore]....';


GO
ALTER TABLE [dbo].[AssignmentScore] WITH NOCHECK
    ADD FOREIGN KEY ([assignmentId]) REFERENCES [dbo].[Assignment] ([assignmentId]);


GO
PRINT N'Creating Foreign Key on [dbo].[Course]....';


GO
ALTER TABLE [dbo].[Course] WITH NOCHECK
    ADD FOREIGN KEY ([announcementId]) REFERENCES [dbo].[Announcement] ([announcementId]);


GO
PRINT N'Creating Foreign Key on [dbo].[ForumTable]....';


GO
ALTER TABLE [dbo].[ForumTable] WITH NOCHECK
    ADD FOREIGN KEY ([courseId]) REFERENCES [dbo].[Course] ([courseId]);


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '86567561-d645-4899-9a25-5fe2a7661541')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('86567561-d645-4899-9a25-5fe2a7661541')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e7737c8b-7375-4d17-8a82-de58cd0616a5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e7737c8b-7375-4d17-8a82-de58cd0616a5')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f7fc88de-c218-40a9-9889-7623daf0b913')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f7fc88de-c218-40a9-9889-7623daf0b913')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0b5f555b-56f9-4dbb-8606-fcc46733c6e2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0b5f555b-56f9-4dbb-8606-fcc46733c6e2')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1eb158e2-901e-4be4-b0f3-b092242512cd')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1eb158e2-901e-4be4-b0f3-b092242512cd')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ee350836-33a3-4522-9931-6eff0e7ab72d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ee350836-33a3-4522-9931-6eff0e7ab72d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e5b91a6f-a2c0-4371-b320-8ab6f4ce8209')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e5b91a6f-a2c0-4371-b320-8ab6f4ce8209')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0fdff2b3-5771-476e-8c4d-b3a0ad8a904f')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0fdff2b3-5771-476e-8c4d-b3a0ad8a904f')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'aaa7b2a3-0529-4f67-a862-b5eb082acdc6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('aaa7b2a3-0529-4f67-a862-b5eb082acdc6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7f9f14fa-5eac-4320-a072-f71fd9edeab7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7f9f14fa-5eac-4320-a072-f71fd9edeab7')

GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.Assignment'), OBJECT_ID(N'dbo.AssignmentScore'), OBJECT_ID(N'dbo.Course'), OBJECT_ID(N'dbo.ForumTable'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: {0} [{1}].[{2}]' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
